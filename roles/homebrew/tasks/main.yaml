---
- name: '[homebrew] Configure Homebrew taps'
  loop: '{{ brew_taps }}'
  homebrew_tap:
    name: '{{ item }}'
- name: Get installed homebrew formulae
  register: installed_brew_packages
  changed_when: false
  ansible.builtin.command:
    cmd: brew list --formulae

- name: Install homebrew formulae
  loop: '{{ brew_packages }}'
  when: item.split('/')[-1] not in installed_brew_packages.stdout_lines
  register: result
  until: result is succeeded
  community.general.homebrew:
    name: '{{ item }}'
    state: present

- name: Get high level homebrew formulae
  register: high_level_brew_packages
  changed_when: false
  ansible.builtin.command:
    cmd: brew leaves

- name: Delete adhoc homebrew formulae
  loop: '{{ high_level_brew_packages.stdout_lines }}'
  when: item.split('/')[-1] not in (brew_packages | map('split', '/') | map('last'))
  register: result
  until: result is succeeded
  community.general.homebrew:
    name: '{{ item }}'
    state: absent

- name: Get installed homebrew casks
  register: installed_cask_packages
  changed_when: false
  ansible.builtin.command:
    cmd: brew list --casks

- name: Install homebrew casks
  loop: '{{ cask_packages }}'
  when: item.split('/')[-1] not in installed_cask_packages.stdout_lines
  register: result
  until: result is succeeded
  community.general.homebrew_cask:
    name: '{{ item }}'
    state: present
    install_options: no-quarantine
    sudo_password: '{{ ansible_become_password }}'

- name: Delete adhoc homebrew casks
  loop: '{{ installed_cask_packages.stdout_lines }}'
  when: item.split('/')[-1] not in (cask_packages | map('split', '/') | map('last'))
  community.general.homebrew_cask:
    name: '{{ item }}'
    state: absent
    sudo_password: '{{ ansible_become_password }}'

- name: Python installed by brew is Python3
  ansible.builtin.file:
    src: '/opt/homebrew/bin/python3'
    path: '/opt/homebrew/bin/python'
    state: link
